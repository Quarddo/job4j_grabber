package ru.job4j.gc;

public class User {
    private String name;
    private int age;

    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
    }

    public static void main(String args) {
        User user = new User("Max", 27);
    }
}
/**
 * Для каждого объекта JVM хранит:
 * 1) Заголовок объекта
 * 2) Память для примитивных типов
 * 3) Память для ссылочных типов
 * 4) Смещение/выравниваниеОбъект
 *
 * Размер заголовка 8 байт(32-х разрядная система) 16 байт(64-х рахрядная система)
 *
 * byte 1 byte
 * short 2  byte
 * int 4 byte
 * long 8 byte
 * char 2 byte
 * float 4 byte
 * double 8 byte
 * boolean 1 bit
 *
 * 1. new User("Max", 27)
 * Заголовок: 8 байт (16 байт) в зависимости от разрядности системы
 * Выравнивание для кратности: 4 байта
 * Переменная приметивного типа int: 4 байта
 * поле age = 4 байта
 * Поле ссылочного типа String:
 *      заголовок: 8 байт (16 байт)
 *      поля int внутри класса String (offset, count, hash code): 4 байта * 3 = 12 байт
 *      ссылочная переменная на объект массива: 4 байта (8 байт)
 *      размер массива символов(примитивов сhar): 2 байта * 3 = 6 байт
 *   поле name = 30 байт (42 байта)
 * Итого (32-х): 8 + 4 + 4 + 8 + 12 + 4 + 6 = 46 байт
 * Итого (64-х): 16 + 4 + 4 + 16 + 12 + 8 + 6 = 66 байт
 *
 * 2. В памяти JVM пустой объект равен размеру заголовка:
 *    32-х битной 8 байт
 *    64-х битной 16 байт
 *
 * 3. Что бы добится самостоятельного вызова сборщика мусора за счет ключей Xmx, нужно превысить количесвто памяти
 * например для хипа -Xmx3m -Xms3m (3мб), создать 100 000 объектов new User и тогда сборщик мусора начнет должен вызваться
 * самостоятельно, оставляя ссылочные типы
 */